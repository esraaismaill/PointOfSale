@inject IGetProductByIdUseCase GetProductByIdUseCase
@inject ISellProductUseCase SellProductUseCase

@if (productToSell != null)
{
    @if (!string.IsNullOrWhiteSpace(errorMessage))
    {
        <div class="alert alert-danger">@errorMessage</div>
    }
<EditForm Model="productToSell" OnValidSubmit="SellProduct">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ValidationSummary></ValidationSummary>

    <div class="form-group">
        <label for="name">Product Name</label>
        <input class="form-control" id="name" type="text" readonly value="@productToSell.Name" />
    </div>
    <div class="form-group">
        <label for="price">Price</label>
        <input class="form-control" id="price" type="text" readonly value="@(string.Format("{0:c}", productToSell.Price))" />
    </div>
    <div class="form-group">
        <label for="qty">Quantity</label>
        <InputNumber id="qty" @bind-Value="@productToSell.Quantity" class="form-control"></InputNumber>
    </div>
    <button type="submit" class="call_to-btn btn_white-border btn">Add</button>
    <!-- <label class="lab ">Visa</label>
     <div class="roundedOne">
         <button type="submit" class="call_to-btn btn_white-border btn">Add</button>
         <input type="checkbox"  id="roundedOne" bind-value="visaa" name="check" />
         <label for="roundedOne"></label>
     </div> -->

</EditForm>
}

@code {
    private Product productToSell;
    private string errorMessage;

    //private bool visaa;

    private Transaction transaction;
    private IEnumerable<Receipts> receipts;

    [Parameter]
    public string Visa { get; set; }



    [Parameter]
    public int RecID { get; set; }

    [Parameter]
    public int cashierId { get; set; } 

    [Parameter]
    public string CashierName { get; set; }

    [Parameter]
    public Product SelectedProduct { get; set; }

    [Parameter]
    public EventCallback<Product> OnProductSold { get; set; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if (SelectedProduct != null)
        {
            productToSell = new Product
            {
                ProductId = SelectedProduct.ProductId,
                Name = SelectedProduct.Name,
                CategoryId = SelectedProduct.CategoryId,
                Price = SelectedProduct.Price,
                Quantity = 1
            };
        }
        else
        {
            productToSell = null;
        }
    }


    private void SellProduct()
    {
        if (string.IsNullOrWhiteSpace(CashierName))
        {
            errorMessage = "The Cashier's name is missing.";
            return;
        }

        if (CashierName == "esraaCashier@test.com")
            cashierId = 1;
        if (CashierName == "esraaCashier2@test.com")
            cashierId = 2;
        
    // Visa = "Cash";
    var product = GetProductByIdUseCase.Execute(productToSell.ProductId);

        if (productToSell.Quantity <= 0)
        {
            errorMessage = "The quanity has to be greater than zero.";
        }
        else if (product.Quantity >= productToSell.Quantity)
        {
            OnProductSold.InvokeAsync(productToSell);
            errorMessage = string.Empty;
            SellProductUseCase.Execute(CashierName, productToSell.ProductId, productToSell.Quantity.Value, Visa, RecID);
        }
        else if (product.Quantity < productToSell.Quantity)
        {
            product.Quantity = productToSell.Quantity;
            OnProductSold.InvokeAsync(productToSell);
            errorMessage = string.Empty;
            SellProductUseCase.Execute(CashierName, productToSell.ProductId, productToSell.Quantity.Value, Visa, RecID);
        }
        else
        {
            errorMessage = $"{product.Name} only has {product.Quantity} left. It is not enough.";
        }
    }

}
